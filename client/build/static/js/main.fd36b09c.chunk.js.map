{"version":3,"sources":["components/company-db-service-context/index.js","components/hoc/with-company-db-service.js","components/hooks/use-get-data.jsx","components/error-indicator/index.js","components/error-indicator/error-indicator.jsx","components/loading-indicator/index.js","components/loading-indicator/loading-indicator.jsx","components/employee-list-item/index.js","components/employee-list-item/employee-list-item.jsx","components/employee-list/index.js","components/employee-list/employee-list.jsx","components/employee-detail/index.js","components/employee-detail/employee-detail.jsx","components/employee-page/index.js","components/employee-page/employee-page.jsx","components/app-header/index.js","components/app-header/app-header.jsx","actions/index.js","components/login-page/index.js","components/login-page/login-page.jsx","components/app/index.js","components/app/App.jsx","reducers/update-user.js","store.js","reducers/index.js","components/error-boundry/index.js","components/error-boundry/error-boundry.jsx","index.js","services/company-db-service.js"],"names":["CompanyDBServiceContext","React","createContext","withCompanyDBService","Wrapped","props","companyDBService","useContext","useGetData","getData","initialState","useMemo","data","isLoading","error","useState","dataState","setDataState","useEffect","cancelled","then","onLoaded","catch","err","onError","ErrorIndicator","LoadingIndicator","className","Spinner","animation","role","EmployeeListItem","employee","surname","onSelectItem","name","patronymic","EmployeeList","withRouter","onClickItem","token","localStorage","getItem","getEmployees","useCallback","getEmployeeList","useGetEmployees","message","ListGroup","map","Item","key","id","onClick","EmployeeDetail","employeeId","getEmployee","useGetEmployee","console","log","birth_date","birth_place","department","position","passport_series","passport_ID","address","salary","attToCons","attitude_to_conscription","maritalStatus","marital_status","sex","EmployeePage","connect","state","user","history","match","params","Row","Col","sm","push","to","AppHeader","dispatch","userLogout","a","destroyToken","type","removeItem","Navbar","bg","sticky","Brand","href","Collapse","Text","username","Button","variant","LoginPage","fetchUser","getMe","payload","userLoaded","setUsername","password","setPassword","errorLogin","setErrorLogin","isTokenLoading","setIsTokenLoading","localToken","Form","Group","controlId","Label","Control","placeholder","value","onChange","e","target","preventDefault","getToken","setItem","auth_token","App","Container","exact","path","updateUser","action","undefined","store","createStore","applyMiddleware","thunk","ErrorBoundry","hasError","this","setState","children","Component","fetch","method","headers","body","response","ok","json","status","Error","ReactDOM","render","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.fd36b09c.chunk.js","sourcesContent":["import React from 'react'\n\nconst CompanyDBServiceContext = React.createContext()\nexport default CompanyDBServiceContext;\n","import React, {useContext} from 'react';\nimport CompanyDBServiceContext from \"../company-db-service-context\"\n\nexport const withCompanyDBService = (Wrapped) => (props)=> {\n    const companyDBService = useContext(CompanyDBServiceContext);\n    return <Wrapped companyDBService={companyDBService} {...props} />\n}","import  { useState, useEffect, useMemo } from \"react\";\n\nexport const useGetData = (getData) => {\n    const initialState = useMemo(() => ({\n        data:null,\n        isLoading:true,\n        error:null\n    }),[]);\n    const [dataState, setDataState] = useState(initialState);\n    const onLoaded = (data) => setDataState({\n                                                data,\n                                                isLoading:false,\n                                                error:null\n                                            });\n    const onError = (err) => setDataState({\n                                            data:null,\n                                            isLoading:false,\n                                            error:err\n                                        });\n    useEffect(() => {\n        setDataState(initialState);\n        let cancelled = false;\n        getData()\n                .then(data => !cancelled && onLoaded(data))\n                .catch(err => !cancelled && onError(err));\n        return () => cancelled=true;\n    },[getData, initialState])\n    return dataState;\n}","import {ErrorIndicator} from \"./error-indicator\";\nexport default ErrorIndicator;","import React from 'react';\n\nexport const ErrorIndicator = () => (\n    <div>\n        <h2>Ooops! Something going wrong...</h2>\n    </div>\n)","import {LoadingIndicator} from \"./loading-indicator\";\nexport default LoadingIndicator;","import React from 'react'\nimport { Spinner } from 'react-bootstrap'\n\nexport const LoadingIndicator = () => (\n    <div className='d-flex my-3'>\n        <Spinner className= 'mx-auto' animation=\"border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n        </Spinner>\n    </div>\n)","import {EmployeeListItem} from \"./employee-list-item\";\nexport default EmployeeListItem;\n","import React from 'react';\n\nexport const EmployeeListItem = ({employee, onSelectItem}) => {\n        let {surname, name, patronymic} = employee;\n        return(\n            <span >\n                {surname} {name} {patronymic}\n            </span>\n        )\n}\n\n","import EmployeeList from \"./employee-list\";\nexport default EmployeeList;","import React, {useCallback} from 'react';\nimport {ListGroup} from \"react-bootstrap\";\nimport {withRouter} from \"react-router-dom\";\n\nimport { withCompanyDBService } from '../hoc';\nimport {useGetData} from \"../hooks\";\nimport ErrorIndicator from \"../error-indicator\";\nimport LoadingIndicator from \"../loading-indicator\";\nimport EmployeeListItem from \"../employee-list-item\";\n\nconst EmployeeList = ({onClickItem,companyDBService}) => {\n    const useGetEmployees = () => {\n        let token = localStorage.getItem('token'),\n            getEmployees = useCallback(()=>companyDBService.getEmployeeList(token),[token]);\n        return useGetData(getEmployees);\n    }\n    let {data, isLoading, error} = useGetEmployees();\n    if (isLoading && !error) {\n        return <LoadingIndicator />\n    }\n    if (error) {\n        return error.message\n    }\n    return (\n        <ListGroup>\n            {data.map(employee => (\n                <ListGroup.Item \n                    key = {employee.id}\n                    onClick={()=>onClickItem(employee.id)} >\n                        <EmployeeListItem employee={employee}\n                        />\n                </ListGroup.Item>)\n            )}\n        </ListGroup>\n    )\n}\n\n\nexport default withRouter(withCompanyDBService(EmployeeList))","import EmployeeDetail from \"./employee-detail\";\nexport default EmployeeDetail;","import React, {useCallback} from 'react';\n\n\nimport { withCompanyDBService } from '../hoc';\nimport {useGetData} from \"../hooks\";\nimport ErrorIndicator from \"../error-indicator\";\nimport LoadingIndicator from \"../loading-indicator\";\n\nconst EmployeeDetail = ({employeeId, companyDBService}) => {\n    const useGetEmployee = () => {\n        let token = localStorage.getItem('token'),\n            getEmployee = useCallback(()=>companyDBService.getEmployee(token,employeeId),[employeeId, token]);\n        return useGetData(getEmployee);\n    }\n    let {data, isLoading, error} = useGetEmployee();\n    console.log(data)\n    if (isLoading && !error) {\n        return <LoadingIndicator />\n    }\n    if (error) {\n        return  error.message\n    }\n    let {surname, name, patronymic, birth_date, birth_place, \n        department, position, passport_series, passport_ID,\n        address, salary, attitude_to_conscription:attToCons, \n        marital_status:maritalStatus, sex} = data;\n    if (sex==='m') {\n        sex='Мужской';\n        if (maritalStatus==='y'){\n            maritalStatus='Женат'\n        } else {\n            maritalStatus='Не женат'\n        }\n    } else if (sex==='f'){\n        sex='Женский';\n        if (maritalStatus==='y'){\n            maritalStatus='Замужем'\n        } else {\n            maritalStatus='Не замужем'\n        }\n    }\n    if (attToCons==='neg'){\n        attToCons='Негативное'\n    } else if (attToCons==='pos'){\n        attToCons='Позитивное'\n    } else {\n        attToCons='Нейтральное'\n    }\n    return (\n        <div>\n            <h3>{surname} {name} {patronymic}</h3>\n            <p>Родился в {birth_date}, {birth_place}</p>\n            <p>Отдел: {department}</p>\n            <p>Должность: {position}</p>\n            <p>Оклад: {salary} руб.</p>\n            <p>Пол: {sex}</p>\n            <p>Паспорт: {passport_series} {passport_ID}</p>\n            <p>Проживает: {address}</p>\n            <p>Семейное положение: {maritalStatus}</p>\n            <p>Отношение к воинской обязанности: {attToCons}</p>\n        </div>\n    )\n}\n\nexport default withCompanyDBService(EmployeeDetail);","import  EmployeePage  from \"./employee-page\";\nexport default EmployeePage;","import React from 'react';\nimport {Row, Col, Jumbotron} from \"react-bootstrap\";\nimport {withRouter} from \"react-router-dom\";\n\nimport EmployeeList from \"../employee-list\";\nimport EmployeeDetail from \"../employee-detail\";\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nconst EmployeePage = ({history,match,user}) => {\n    let {id} = match.params;\n    if (!user) {\n        return <Redirect to='/'/>\n    }\n    return (\n        <Row  className='m-4'>\n            <Col sm={3}>\n                <EmployeeList onClickItem = {(employeeId)=>{history.push(`${employeeId}`)}}/>\n            </Col>\n            <Col sm={9}>\n                <div  className='border rounded p-5 w-100'>\n                    {id?\n                        <EmployeeDetail employeeId={id}/>:\n                        <h3>Выберите работника из списка</h3>}\n                </div>\n            </Col>\n        </Row>\n    )\n}\nconst mapStateToProps = (state) => ({\n    ...state.user\n})\n\nexport default connect(mapStateToProps)(withRouter(EmployeePage))","import AppHeader from \"./app-header\";\nexport default AppHeader;","import React from 'react';\nimport {Navbar, Button} from \"react-bootstrap\";\nimport { userLogout } from '../../actions';\nimport { connect } from 'react-redux';\nimport { withCompanyDBService } from '../hoc';\n\n\nconst AppHeader = ({user,userLogout}) => (\n    <Navbar bg='light' sticky='top'>\n        <Navbar.Brand href='/'>\n            <h1>Company DB</h1>\n        </Navbar.Brand>\n        {user?\n            <Navbar.Collapse className=\"justify-content-end\">\n                <Navbar.Text>\n                    Signed in as: {user.username}\n                </Navbar.Text>\n                <Button \n                    variant='outline-danger'\n                    onClick={userLogout}>Выход</Button>\n            </Navbar.Collapse>\n        :''}\n        {console.log(user)}\n    </Navbar>\n)\n\nconst mapDispatchToProps = (dispatch, {companyDBService}) =>({\n    userLogout: async () =>{\n                        companyDBService.destroyToken(localStorage.getItem('token'));\n                        dispatch(userLogout());\n                        localStorage.removeItem('token');\n                    }\n})\n\nconst mapStateToProps = (state) => ({\n    ...state.user\n})\n\nexport default withCompanyDBService(\n                    connect(mapStateToProps, mapDispatchToProps)\n                        (AppHeader))\n","const userRequested =()=>({\n    type: 'FETCH_USER_REQUEST'\n})\nconst userLoaded=(user)=>({\n    type: 'FETCH_USER_SUCCESS',\n    payload: user\n})\nconst userError=(err)=>({\n    type: 'FETCH_USER_FAILURE',\n    payload: err\n})\nconst userLogout=()=>({\n    type: 'USER_LOGOUT'\n})\n\nconst fetchUser = (companyDBService) => (token) => (dispatch)=>{\n    console.log(token)\n    dispatch(userRequested());\n    companyDBService.getMe(token)\n        .then(user=>dispatch(userLoaded(user)))\n        .catch(error=>dispatch(userError(error)))\n}\n\nexport {\n    userRequested,\n    userLoaded,\n    userError,\n    userLogout,\n    fetchUser\n}","import LoginPage from \"./login-page\";\nexport default LoginPage;","import React, {useState, useContext, useEffect} from 'react';\nimport {connect} from 'react-redux';\nimport {Form, Button} from \"react-bootstrap\" ;\nimport CompanyDBServiceContext from \"../company-db-service-context\";\nimport {withCompanyDBService} from \"../hoc\";\nimport {fetchUser} from '../../actions';\nimport LoadingIndicator from \"../loading-indicator\";\nimport { Redirect } from 'react-router-dom';\nimport {bindActionCreators} from 'redux'\n\nconst LoginPage = ({user, error, isLoading, fetchUser}) => {\n    let [username, setUsername] = useState(''),\n        [password, setPassword] = useState(''),\n        [errorLogin, setErrorLogin] = useState(''),\n        [isTokenLoading, setIsTokenLoading] = useState(false),\n        companyDBService = useContext(CompanyDBServiceContext);\n    useEffect(() => {\n        let localToken=localStorage.getItem('token');\n        if (localToken){\n            fetchUser(localToken)\n        }\n    }, [])\n    const handlerOnSubmit = (e) =>{\n        e.preventDefault();\n        setIsTokenLoading(true);\n        companyDBService.getToken(username,password)\n            .then(data=>{\n                setErrorLogin(false);\n                localStorage.setItem('token',data.auth_token);\n                console.log(fetchUser);\n                fetchUser(data.auth_token);\n            })\n            .catch(error=>{\n                setErrorLogin(error.message);\n                setIsTokenLoading(false);\n            })\n    }\n    if (isLoading){\n        return <LoadingIndicator />\n    }\n    return (\n            <Form className='w-50 mx-auto'>\n                {errorLogin?\n                    <Form.Text className='text-danger'>\n                        {errorLogin}\n                    </Form.Text>:''\n                }\n                {error?\n                    <Form.Text className='text-danger'>\n                        {error.message}\n                        {localStorage.removeItem('token')}\n                    </Form.Text>:''\n                }\n                {user?\n                    <Redirect to='/employee/'/>:''\n                }\n                <Form.Group controlId=\"formUsername\">\n                    <Form.Label>Username</Form.Label>\n                    <Form.Control placeholder=\"Username\" \n                                    value={username} \n                                    onChange={e=>setUsername(e.target.value)}/>\n                </Form.Group>\n\n                <Form.Group controlId=\"formPassword\">\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control type=\"password\" \n                                    placeholder=\"Password\" \n                                    value={password} \n                                    onChange={e=>setPassword(e.target.value)}/>\n                </Form.Group>\n                {isTokenLoading?<LoadingIndicator />:\n                    <Button variant=\"primary\" type=\"submit\" onClick={handlerOnSubmit}>\n                        Submit\n                    </Button>}\n            </Form>\n    )\n}\n\nconst mapStateToProps = (state)=>({\n    ...state.user\n})\n\nconst mapDispatchToProps = (dispatch,{companyDBService})=> (\n    {\n        fetchUser: (token)=>dispatch(fetchUser(companyDBService)(token))\n    }\n)\n\nexport default withCompanyDBService(\n                    connect(mapStateToProps, mapDispatchToProps)\n                        (LoginPage)\n)","import {App} from './App';\nexport default App;","import React from 'react';\nimport {Container} from \"react-bootstrap\";\nimport {Switch, Route} from \"react-router-dom\";\n\nimport CompanyDBServiceTest from \"../../services/company-db-service-test\";\nimport CompanyDBService from \"../../services/company-db-service\";\nimport CompanyDBServiceContext from \"../company-db-service-context\";\nimport EmployeePage from \"../employee-page\";\nimport AppHeader from \"../app-header\";\nimport LoginPage from \"../login-page\"\n\nexport const App = () => {\n    return (\n        <>\n            <AppHeader />\n            <Container>\n                <Switch>\n                    <Route exact path='/employee/:id?'>\n                        <EmployeePage/>\n                    </Route>\n                    <Route exact path='/'>\n                        <LoginPage />\n                    </Route>\n                    <Route>\n                        <h2 className='m-5 text-center'>Page not found</h2>\n                    </Route>\n                </Switch>\n            </Container>\n        </>       \n    )\n}\n","export const updateUser=(state, action)=>{\n    if (state===undefined){\n        return {\n            user:null,\n            error:null,\n            isLoading:false\n        }\n    }\n    switch (action.type) {\n        case 'FETCH_USER_REQUEST':\n            return {\n                user:null,\n                error:null,\n                isLoading:true\n            }\n        case 'FETCH_USER_SUCCESS':\n            return {\n                user:action.payload,\n                error:null,\n                isLoading:false\n            }\n        case 'FETCH_USER_FAILURE':\n            return {\n                user:null,\n                error:action.payload,\n                isLoading:false\n            }\n        case 'USER_LOGOUT':\n            return {\n                user:null,\n                error:null,\n                isLoading:false\n            }\n        default:\n            return state.user;\n    }\n}","import {createStore, applyMiddleware} from \"redux\";\nimport {reducer} from \"./reducers\";\nimport thunk from \"redux-thunk\";\n\nconst store = createStore(reducer,applyMiddleware(thunk));\n\nexport default store;","import {updateUser} from \"./update-user\"\n\nexport const reducer=(state, action)=>{\n    return {\n        user: updateUser(state,action),\n    }\n}","import ErrorBoundry from './error-boundry';\nexport default ErrorBoundry;","import React , {Component} from 'react';\nimport ErrorIndicator from \"../error-indicator\";\n\nexport default class ErrorBoundry extends Component {\n    state={\n        hasError:false\n    }\n\n    componentDidCatch() {\n        this.setState({\n            hasError:true\n        })\n    }\n    render() {\n        if (this.state.hasError === true) {\n            return <ErrorIndicator />\n        }\n        return this.props.children\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\nimport store from \"./store\";\nimport {Provider} from \"react-redux\"\nimport {BrowserRouter as Router} from \"react-router-dom\";\n\nimport ErrorBoundry from \"./components/error-boundry\";\nimport CompanyDBServiceTest from \"./services/company-db-service-test\";\nimport CompanyDBService from \"./services/company-db-service\";\nimport CompanyDBServiceContext from \"./components/company-db-service-context\";\n\nconst companyDBService = new CompanyDBService();\n\nReactDOM.render(\n    <Provider store={store}>\n        <ErrorBoundry>\n            <Router>\n                <CompanyDBServiceContext.Provider value={companyDBService}>\n                    <App />\n                </CompanyDBServiceContext.Provider>\n            </Router>\n        </ErrorBoundry>\n    </Provider>\n    , document.getElementById('root'));\n\n","\nexport default class CompanyDBService {\n    getToken = async (username,password)=>{\n        let response = await fetch('http://localhost:8000/auth/token/login/',{\n            method:'POST',\n            headers:{\n                'Content-Type':'application/x-www-form-urlencoded'\n            },\n            body:`username=${username}&password=${password}`\n        })\n        if (response.ok){\n            return response.json()\n        } else if (response.status===400) {\n            throw new Error('Неверные учетные данные')\n        } else {\n            throw new Error(`Что-то пошло не так... ${response.status}`)\n        }\n    }\n    destroyToken = async (token) =>{\n        let response = await fetch('http://localhost:8000/auth/token/logout/',{\n            method:'POST',\n            headers:{\n                'Content-Type':'application/x-www-form-urlencoded',\n                'Authorization':`Token ${token}`\n            }\n        })\n        if (!response.ok){\n            throw new Error(`Что-то пошло не так... ${response.status}`)\n        }\n    }\n    getMe = async (token) =>{\n        let response = await fetch('http://localhost:8000/auth/users/me/',{\n            headers:{\n                'Authorization':`Token ${token}`\n            }\n        })\n        if (response.ok){\n            return response.json()\n        } else if (response.status===401) {\n            throw new Error('Неверный токен')\n        } else {\n            throw new Error(`Что-то пошло не так... ${response.status}`)\n        }\n    }\n    getEmployeeList = async (token) => {\n        let response = await fetch('http://localhost:8000/api/1.0/employee/',{\n            headers:{\n                'Authorization':`Token ${token}`\n            }\n        })\n        if (response.ok){\n            return response.json()\n        } else if (response.status===401) {\n            throw new Error('У вас нет прав для просмотра этого содержимого')\n        } else {\n            throw new Error(`Что-то пошло не так... ${response.status}`)\n        }\n    }\n\n    getEmployee = async (token,id) => {\n        let response = await fetch(`http://localhost:8000/api/1.0/employee/${id}/`,{\n            headers:{\n                'Authorization':`Token ${token}`\n            }\n        })\n        if (response.ok){\n            return response.json()\n        } else if (response.status===401) {\n            throw new Error('У вас нет прав для просмотра этого содержимого')\n        } else {\n            throw new Error(`Что-то пошло не так... ${response.status}`)\n        }\n    }\n}"],"sourceRoot":""}